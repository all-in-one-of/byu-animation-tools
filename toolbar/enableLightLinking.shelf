<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="make_geo_editable" label="Enable Light Linking" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import otlmanager as mgr

# Get Node Selection and Ensure Not Empty
selected = hou.selectedNodes()
if not selected:
    raise Exception("Please Select at least 1 Checked Out Node.")

# Iterate Over Selected Nodes
for node in selected:
    # Make Sure Node is a D.A.
    if not mgr.isDigitalAsset(node):
        hou.ui.displayMessage(node.name() + " is not a Digital Asset.  Skipping...")
        continue
    
    # Make Sure Node is Checked Out to Current User
    libraryPath = node.type().definition().libraryFilePath()
    filename = os.path.basename(libraryPath)
    info = mgr.getFileInfo(filename)
    if info == None or not info[2] or node.isLocked() or info[3] != mgr.USERNAME:
        hou.ui.displayMessage("Operation Failed on Node: " + node.name() + ". Make sure you have the node checked out first.")
        continue
    
    # Actually Do the Stuff We WANT...  =D
    # Like, create a Light Linking Parameter Folder on the Asset,
    # then create corresponding light linking parameters (reflection, refraction, and mask)
    # for each geo child inside the asset.
    
    # Get all Child Geo Nodes (to promote light linking parameters)
    geo_children = []
    geo_children_llparms = {}
    for child in node.allSubChildren():
        if child.type().name() == "geo":
            geo_children.append(child)
            geo_children_llparms[child] = {child.name()+"_reflectmask":child.evalParm("reflectmask"),\
                                           child.name()+"_refractmask":child.evalParm("refractmask"),\
                                           child.name()+"_lightmask":child.evalParm("lightmask")}
            
    # Create a Light Linking folder on the Asset
    node.addSpareParmFolder("Promoted Light Linking")
    
    # Create LL Parameters for all geo_children of this asset.
    for child in geo_children:
        refl_mask = hou.StringParmTemplate(child.name() + "_reflectmask",\
                                           child.name() + " Reflection Mask",\
                                           1,\
                                           default_value=('*',),\
                                           string_type=hou.stringParmType.NodeReferenceList)
        refr_mask = hou.StringParmTemplate(child.name() + "_refractmask",\
                                           child.name() + " Refraction Mask",\
                                           1,\
                                           default_value=('*',),\
                                           string_type=hou.stringParmType.NodeReferenceList)
        light_mask = hou.StringParmTemplate(child.name() + "_lightmask",\
                                           child.name() + " Light Mask",\
                                           1,\
                                           default_value=('*',),\
                                           string_type=hou.stringParmType.NodeReferenceList)
        node.addSpareParmTuple(refl_mask, in_folder=["Promoted Light Linking",])
        node.addSpareParmTuple(refr_mask, in_folder=["Promoted Light Linking",])
        node.addSpareParmTuple(light_mask, in_folder = ["Promoted Light Linking",])
        node.setParms(geo_children_llparms[child])
        
        # Link the geo_child parms to the newly created asset-level parms
        child.parm("reflectmask").set("`chsop('../" + child.name() + "_reflectmask')`")
        child.parm("refractmask").set("`chsop('../" + child.name() + "_refractmask')`")
        child.parm("lightmask").set("`chsop('../" + child.name() + "_lightmask')`")

hou.ui.displayMessage("Finished!!")]]></script>
  </tool>
</shelfDocument>
